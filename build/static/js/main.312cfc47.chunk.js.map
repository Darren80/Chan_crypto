{"version":3,"sources":["logo.svg","1024px-No_image_available.svg.png","Components/utils/analyser.js","Components/utils/initLocalforage.js","Components/GetAllPosts.js","Components/utils/saveToDatabase.js","Components/utils/link-score.js","Components/DataAnalyser.js","Components/display/timeline.js","Components/PostSelectors.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","allWords","localforage","require","localforageInit","archiveStore","createInstance","driver","INDEXEDDB","name","version","storeName","description","wordStore","computedStore","nsfwScoreStore","retriveNewestUNIXKey","_retriveNewestUNIXKey","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","keys","then","uNIXkeys","Math","max","apply","toConsumableArray","catch","err","console","log","abrupt","sent","stop","this","arguments","retriveAllUNIXKeys","_retriveAllUNIXKeys","_callee2","_context2","getItem","_getItem","_callee4","key","_context4","_ref","_callee3","value","_context3","_x2","_x","linkify","top400Tickers","analyser","postLength","_postLength","threadPosts","Promise","resolve","reject","wordCountArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_ref4","_ref3","index","thread","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","post","comText","subText","Ωword_count","Ωunique_word_count","Ωunique_word_count_percent","percentDone","undefined","entries","Symbol","iterator","done","slicedToArray","posts","helper","removeHTML","com","sub","countWords","countUniqueRealWords","round","push","t0","return","finish","concat","t1","_x3","error","ticker","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_ref7","_ref6","matchesInThread","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","tickerSymbolRegExp","counter","matches","exec","includes","tickers","uniqueParticipants","forEach","ids","length","uniqueIDs","unique_ips","uniqueIDsPercent","links","i","arrayOfLinks","find","postNo","postId","id","linksInPost","time","time_posted","generateCryptoRandomNumber","min","crypto","html","div","document","createElement","innerHTML","text","innerText","textContent","replace","array","Uint32Array","window","getRandomValues","result","pow","floor","str","unique","Set","split","filter","size","_countUniqueRealWords","wordsStore","words","map","word","toLowerCase","trim","_x4","GetAllPosts","_React$Component","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getThreadPosts","bind","assertThisInitialized","retriveNewestValue","update","getAllPosts","getAllPostsCallback","inherits","createClass","_componentDidMount","uNIXkey","uNIXvalue","Number","_update","delta","_this2","setTimeout","refreshCatalog","allThreadPosts","handleData","_getAllPosts","_callee5","itemsProcessed","_this3","_context5","Date","now","Array","isArray","threads","reverse","no","setItem","success","_callee6","_context6","_retriveNewestValue","_callee8","_context8","_callee7","_context7","_getThreadPosts","_callee9","threadNo","url","response","jsonResponse","_context9","corsProxy","fetch","ok","json","react_default","React","Component","mongoose","db","connect","websiteWeights","href","weight","linkScore","opLinksObject","link","opLinkCount","weightedHrefsFoundArray","reduce","arr","found","website","totalWeight","sum","weightedWebsite","filteredLinks","linkCount","flat","_","outliers","ReactDOMServer","HtmlToReactParser","Parser","DataAnalyser","startAnalyser","fileReader","storeAndUpdateThreadState","preworkChecks","getNudityScores","filterCreationDate","rate","nsfwItemCompleted","iterateLinks","prevProps","isEqual","computed","_storeAndUpdateThreadState","threadKey","_preworkChecks","every","elementCheck","removeItem","_startAnalyser","b","JSON","parse","stringify","nudityScoreArray","nsfw_score","threadIndex","postIndex","all","values","_getNudityScores","clonedArray","scoreArray","scores","allowedImageFileTypes","itemsToProcess","promise","results","imageUrl","exists","_ref2","tim","ext","parseFloat","t2","t3","_nsfwItemCompleted","_x5","_x6","normalise","val","rating","ratings","timeRating","wordRating","filtered","count","average","sort","number","linkWeight","linkRating","opLinkWeight","opLinkRating","linkCards","className","target","rel","Id","dangerouslySetInnerHTML","__html","reactElement","renderToStaticMarkup","files","querySelector","file","FileReader","readAsText","onload","e","toString","_x7","multiple","type","onChange","cards","vis","Timeline","createVisualisation","timescale","monthDiff","_createVisualisation","container","data","items","options","timeline","getElementById","startDate","getFullYear","setMinutes","getMinutes","getTime","UNIX","parseInt","date","mins","slice","title","getHours","start","DataSet","height","stack","horizontalScroll","zoomKey","zoomMin","zoomMax","zoom","timelineZoomLevel","end","on","properties","updateTimelineZoomLevel","endDate","monthDifference","itemsPerMonth","nthItem","monthItems","keyDate","time24Hr","item","style","setUTCMonth","getUTCMonth","setItems","unixDelta","times","year1","year2","month1","getMonth","month2","PostSelectors","processing","downloading","getImage","arrayBufferToBase64","progress","nsfwReveal","localStorage","isNaN","updateIndex","_componentDidUpdate","buffer","binary","Uint8Array","String","fromCharCode","btoa","loaded","total","percent","imgPercent","updateImgPercent","_getImage","that","status","Error","contentLength","headers","get","timer1","setInterval","Response","ReadableStream","controller","reader","body","getReader","read","clearInterval","close","byteLength","enqueue","blob","updateImage","URL","createObjectURL","message","img404","imageStr","updateNsfw","setDate","getDate","content","hour","day","week","month","year","decade","range","month1Keys","getUTCFullYear","setKeys","onClick","direction","fround","hours","abs","toFixed","backgroundImage","threadImage","revealNsfw","index_es","backgroundImageStyles","LinearProgress_default","color","variant","Fragment","renderSelectors","timeline_Timeline","App","state","imgDownloadPercent","deepaiApiKey","fetchBoardCatalog","prepareData","updateImgDownloadPercent","setState","catalog","allThreads","page","capcode","sortBy","img","zoomLevel","src","logo","alt","GetAllPosts_GetAllPosts","DataAnalyser_DataAnalyser","PostSelectors_PostSelectors","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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S,MAAO,MAAO,IAAK,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,OAAQ,MAAO,QAAS,OAAQ,MAAO,KAAM,KAAM,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,MAAO,MAAO,OAAQ,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,OAAQ,MAAO,MAAO,OAAQ,OAAQ,MAAO,MAAO,MAAO,OAAQ,OAAQ,QAAS,OAAQ,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,OAAQ,MAAO,MAAO,SAAU,MAAO,QAAS,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,OAAQ,QAAS,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,QAAS,MAAO,MAAO,MAAO,OAAQ,MAAO,OAAQ,MAAO,MAAO,MAAO,QAAS,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,MAAO,MAAO,QAAS,MAAO,MAAO,MAAO,MAAO,QAAS,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,UAAW,MAAO,MAAO,OAAQ,MAAO,QAAS,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,QAAS,OAAQ,QAAS,MAAO,KAAM,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,QAAS,OAAQ,MAAO,OAAQ,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,QAAS,MAAO,OAAQ,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,QAAS,MAAO,MAAO,MAAO,MAAO,MAAO,QAAS,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,QAAS,OAAQ,OAAQ,MAAO,QAAS,MAAO,MAA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","file":"static/js/main.312cfc47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/1024px-No_image_available.svg.32e55f10.png\";","import { localforageInit } from './initLocalforage';\r\n\r\nconst linkify = require('linkifyjs');\r\nconst cryptocurrencies = require('cryptocurrencies');\r\nconst top400Tickers = ['BTC', 'XRP', 'ETH', 'LTC', 'EOS', 'BCH', 'USDT', 'TRX', 'XLM', 'BNB', 'BSV', 'ADA', 'XMR', 'IOTA', 'DASH', 'NEO', 'MKR', 'ETC', 'XEM', 'ZEC', 'USDC', 'WAVES', 'XTZ', 'DOGE', 'VET', 'TUSD', 'ONT', 'BTG', 'QTUM', 'LINK', 'OMG', 'DCR', 'HOT', 'REP', 'BAT', 'ZRX', 'ZIL', 'LSK', 'PAX', 'BCN', 'NANO', 'BCD', 'DGB', 'BTS', 'NPXS', 'ICX', 'AE', 'XVG', 'STEEM', 'SC', 'GUSD', 'STRAT', 'BTM', 'DAI', 'R', 'IOST', 'KMD', 'PPT', 'SNT', 'ETN', 'CNX', 'REPO', 'GNT', 'MAID', 'AOA', 'THETA', 'ARDR', 'FCT', 'HT', 'HC', 'ODE', 'INB', 'XIN', 'ARK', 'LRC', 'WTC', 'QNT', 'LKY', 'PIVX', 'VERI', 'CRO', 'MANA', 'RDD', 'EURS', 'GXC', 'PAI', 'MCO', 'AION', 'KCS', 'NEXO', 'ETP', 'DGD', 'XZC', 'ELA', 'RVN', 'POWR', 'BNT', 'WAX', 'DENT', 'MONA', 'WAN', 'ELF', 'MOAC', 'POLY', 'B2G', 'SAN', 'PAY', 'DGTX', 'LOOM', 'CENNZ', 'NULS', 'ZEN', 'NXT', 'QKC', 'NAS', 'TOMO', 'FUN', 'APL', 'WICC', 'SYS', 'AGI', 'BTCP', 'ENG', 'QASH', 'MGO', 'EDR', 'BCZERO', 'DCN', 'GBYTE', 'ENJ', 'GBC', 'GAS', 'RLC', 'OSA', 'EDO', 'RNT', 'KNC', 'PART', 'CMT', 'DRGN', 'STORJ', 'MITH', 'MFT', 'KIN', 'NXS', 'BRD', 'CHX', 'XPX', 'QBIT', 'IOTX', 'SALT', 'GVT', 'CVC', 'CND', 'XYO', 'EDG', 'SUB', 'CTXC', 'UNO', 'GRS', 'C20', 'BOS', 'AUTO', 'NEBL', 'INO', 'HYC', 'REQ', 'TCT', 'GTO', 'GETX', 'STORM', 'BIX', 'SRN', 'MDA', 'TRUE', 'PLC', 'SXDT', 'PPC', 'VTC', 'LOC', 'ETHOS', 'OCN', 'BFT', 'VEE', 'GNO', 'BZNT', 'WGR', 'PZM', 'SKY', 'EMC', 'DATA', 'CNUS', 'TKY', 'NSD', 'BLOCK', 'LML', 'TEL', 'POE', 'QRL', 'IGNIS', 'SMT', 'MAN', 'TPAY', 'DDD', 'PMA', 'RDN', 'MTL', 'ECOREAL', 'ANT', 'REN', 'CRPT', 'OST', 'STACS', 'NEC', 'RHOC', 'DMT', 'UTK', 'SLS', 'DEX', 'TEN', 'VITAE', 'HEDG', 'NCASH', 'MLN', 'CS', 'MEDX', 'BCO', 'NAV', 'RUFF', 'EVR', 'SLT', 'TKN', 'DLT', 'NMC', 'SMART', 'VIBE', 'LCC', 'DROP', 'SBD', 'FSN', 'INS', 'EMC2', 'QSP', 'GOT', 'PLR', 'HYN', 'NKN', 'APIS', 'EVN', 'SAFEX', 'PPP', 'FIII', 'EVN', 'LEND', 'SWM', 'GTC', 'BRZC', 'MOC', 'WINGS', 'BLZ', 'ADX', 'ECA', 'AMB', 'MXM', 'BURST', 'UBQ', 'CPT', 'NLG', 'CWV', 'LRN', 'NRG', 'AOG', 'XWC', 'MDS', 'SDA', 'BCV', 'TIOX', 'LEO', 'HPB', 'WABI', 'NIX', 'COSS', 'XDN', 'COSM', 'FLO', 'SPHTX', 'MWAT', 'BEAM', 'BAX', 'SNGLS', 'PHX', 'KEY', 'ITC', 'VIA', 'TNB', 'WPR', 'ABT', 'SNM', 'MXC', 'LA', 'ABT', 'NEU', 'BAY', 'DNT', 'MET', 'NOAH', 'LAMB', 'CSC', 'SCRL', 'IHT', 'META', 'FAIR', 'WCT', 'ZIP', 'HUM', 'MOD', 'BITCNY', 'EDR', 'CLOAK', 'RFR', 'PRO', 'TNT', 'VITE', 'PLY', 'POA', 'FOAM', 'BTO', 'HYDRO', 'WWB', 'AMO', 'KAT', 'XSN', 'BPT', 'QNTU', 'MED', 'RCN', 'ACT', 'QLC', 'JNT', 'CLAM', 'DTA', 'CPC', 'EVX', 'TRIO', 'SOC', 'XAS', 'GAME', 'CBC', 'ZCL', 'TMC', 'CVNT', 'CVT', 'DX', 'TRAC', 'ATCC', 'OIO', 'LBC', 'MOBI', 'MTH', 'QCH', 'LGO', 'PRG', 'CDT', 'ARN', 'POLIS', 'RBLX', 'ROX', 'TTC', '$PAC', 'PST', 'DBET', 'SSP', 'LOKI', 'NPX', 'FTM', 'INT', 'DEC', 'NMR', 'DGX', 'LYL', 'LYM', 'PAI', 'KAN', 'RTH', 'APPC', 'DERO', 'TIX', 'CRYP', 'BITUSD', 'CNN', 'LBA', 'MER', 'LINDA', 'XCP', 'VIB', 'YOYOW', 'NTY', 'POT']\r\n// const fleschKincaid = require('flesch-kincaid');\r\n\r\nconst _ = require(\"underscore\");\r\n\r\nvar allWords;\r\n\r\nexport let analyser = {\r\n\r\n    async postLength(threadPosts) {\r\n\r\n        return new Promise(async (resolve, reject) => {\r\n\r\n            let wordCountArray = [];\r\n            for (let [index, thread] of threadPosts.entries()) {\r\n                wordCountArray[index] = [];\r\n                for (let post of thread.posts) {\r\n\r\n                    if (post.Ωword_count && post.Ωunique_word_count && post.Ωunique_word_count_percent) { continue };\r\n\r\n                    let comText = helper.removeHTML(post.com);\r\n                    let subText = helper.removeHTML(post.sub);\r\n\r\n                    //Use the Omega Ω symbol to push items to the bottom of the list. Ω comes after z.\r\n                    let Ωword_count = helper.countWords(comText) + helper.countWords(subText);\r\n                    let Ωunique_word_count = await helper.countUniqueRealWords(comText + \" \" + subText);\r\n                    let Ωunique_word_count_percent = Math.round(Ωunique_word_count / Ωword_count * 100);\r\n\r\n                    wordCountArray[index].push({\r\n                        'Ωword_count': Ωword_count, \r\n                        'Ωunique_word_count': Ωunique_word_count,\r\n                        'Ωunique_word_count_percent': Ωunique_word_count_percent\r\n                    });\r\n\r\n                }\r\n\r\n                let percentDone = Math.round(((index + 1) / 150) * 100);\r\n                if (percentDone % 10 === 0) {\r\n                    console.log(`${percentDone}%`); //Percent done.\r\n                }\r\n\r\n            };\r\n\r\n            resolve(wordCountArray);\r\n\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n    },\r\n\r\n    ticker(threadPosts) {\r\n\r\n        //TODO: Limit symbols to 3 per post\r\n        //TODO: Limit to the top 400 cryptocurrencies\r\n\r\n        for (let [index, thread] of threadPosts.entries()) {\r\n            let matchesInThread = [];\r\n            for (let post of thread.posts) {\r\n                let comText = helper.removeHTML(post.com);\r\n                let subText = helper.removeHTML(post.sub);\r\n\r\n                let tickerSymbolRegExp = /([A-Z]){2,}/g;\r\n                let counter = 0;\r\n                let matches;\r\n                while ((matches = tickerSymbolRegExp.exec(comText + \" \" + subText)) !== null) {\r\n\r\n                    if (top400Tickers.includes(matches[0])) {\r\n                        matchesInThread.push(matches[0]);\r\n                        counter++;\r\n                    }\r\n\r\n                    if (counter === 2) {\r\n                        break;\r\n                    };\r\n\r\n                };\r\n            }\r\n            thread.tickers = matchesInThread;\r\n            // if (matchesInThread.length) { console.log(matchesInThread, index); }\r\n        }\r\n        console.log(threadPosts);\r\n        return threadPosts;\r\n    },\r\n\r\n    uniqueParticipants(threadPosts) {\r\n\r\n        threadPosts.forEach(thread => {\r\n\r\n            thread.ids = thread.posts.length;\r\n            thread.uniqueIDs = thread.posts[0].unique_ips;\r\n            thread.uniqueIDsPercent = Math.round(thread.uniqueIDs / thread.posts.length * 100);\r\n        });\r\n\r\n        return threadPosts;\r\n    },\r\n\r\n    // async fleschKincaid(threadPosts) {\r\n\r\n    //     return await new Promise((resolve, reject) => {\r\n    //         for (let [index, thread] of threadPosts.entries()) {\r\n\r\n    //             let cleanText = \".\";\r\n    //             if (typeof thread.posts[0].com === \"string\" && typeof thread.posts[0].sub === \"string\") {\r\n\r\n    //                 cleanText = thread.posts[0].sub.replace(/<br>/g, \". \") + \"  \" + thread.posts[0].com.replace(/<br>/g, \". \");\r\n    //                 cleanText = helper.removeHTML(cleanText).replace(/[>]/g, \" \");\r\n\r\n    //             } else if (typeof thread.posts[0].com === \"string\") {\r\n\r\n    //                 cleanText = thread.posts[0].com.replace(/<br>/g, \". \");\r\n    //                 cleanText = helper.removeHTML(cleanText).replace(/[>]/g, \" \");\r\n\r\n    //             } else if (typeof thread.posts[0].sub === \"string\") {\r\n\r\n    //                 cleanText = thread.posts[0].sub.replace(/<br>/g, \". \");\r\n    //                 cleanText = helper.removeHTML(cleanText).replace(/[>]/g, \" \");\r\n\r\n    //             }\r\n\r\n    //             let links = linkify.find(cleanText);\r\n    //             links.forEach(link => {\r\n    //                 cleanText = cleanText.split(link.value).join(\"\");\r\n    //             });\r\n\r\n    //             let rating;\r\n    //             try {\r\n    //                 rating = fleschKincaid.rate(cleanText);\r\n    //             } catch (error) {\r\n    //                 console.log(`error at ${index}: ${error}`);\r\n    //                 rating = \"none\";\r\n    //             }\r\n\r\n    //             thread.fleschRating = rating;\r\n\r\n    //         };\r\n    //         resolve(threadPosts);\r\n    //     }).catch(error => {\r\n    //         console.log(error);\r\n    //     });\r\n    // },\r\n\r\n    links(threadPosts) {\r\n\r\n        threadPosts.forEach(thread => {\r\n            thread.links = [];\r\n            thread.posts.forEach((post, i) => {\r\n                let arrayOfLinks = linkify.find(post.com + \" \" + post.sub);\r\n                if (arrayOfLinks.length !== 0) {\r\n                    thread.links.push({\r\n                        postNo: i,\r\n                        postId: post.id,\r\n                        linksInPost: arrayOfLinks\r\n                    })\r\n                }\r\n            });\r\n        });\r\n        return threadPosts;\r\n    },\r\n\r\n    time(threadPosts) {\r\n\r\n            threadPosts.forEach((thread, i) => {\r\n                threadPosts[i].time_posted = thread.posts[0].time;\r\n            });\r\n            return threadPosts;\r\n    },\r\n\r\n    generateCryptoRandomNumber(min, max) {\r\n        return helper.crypto(min, max);\r\n    }\r\n};\r\n\r\nlet retrive = {\r\n\r\n}\r\n\r\nexport let helper = {\r\n\r\n    //Remove html from HTML text\r\n    removeHTML(html) {\r\n        let div = document.createElement(\"div\");\r\n        div.innerHTML = html;\r\n        let text = div.innerText || div.textContent || \"\";\r\n\r\n        //Remove ALL punctuation from a sentence in order for the word counter to work.\r\n        text = text.replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,\\-.\\/:;<=>?@\\[\\]^_`{|}~]/g, \" \");\r\n        return text;\r\n    },\r\n\r\n    crypto(min, max) { // Generate a random time between min and max. min and max included.\r\n\r\n        //Generate two cryptographically random, unsigned 32-bit integers\r\n        let array = new Uint32Array(2);\r\n        window.crypto.getRandomValues(array);\r\n\r\n        // keep all 32 bits of the the first, top 20 of the second for 52 random bits\r\n        let mantissa = (array[0] * Math.pow(2, 20)) + (array[1] >>> 12)\r\n        // shift all 52 bits to the right of the decimal point\r\n        let result = mantissa * Math.pow(2, -52);\r\n\r\n        if (!min || !max) {\r\n            min = 0; max = 1;\r\n        }\r\n        //\r\n        return Math.floor(result * (max - min + 1) + min);\r\n    },\r\n\r\n    countWords(str, unique) {\r\n        str = str.replace(/(^\\s*)|(\\s*$)/gi, \"\");//exclude  start and end white-space\r\n        str = str.replace(/[ ]{2,}/gi, \" \");//2 or more space to 1\r\n        str = str.replace(/\\n /, \"\\n\"); // exclude newline with a start spacing\r\n\r\n        if (unique) { //Count only words that are unique\r\n            return new Set(str.split(' ').filter(function (str) { return str != \"\"; })).size;\r\n        } else {\r\n            return str.split(' ').filter(function (str) { return str != \"\"; }).length;\r\n        }\r\n        //return s.split(' ').filter(String).length; - this can also be used\r\n    },\r\n\r\n    async countUniqueRealWords(str) {\r\n        str = str.replace(/(^\\s*)|(\\s*$)/gi, \"\");//exclude start and end white-space\r\n        str = str.replace(/[ ]{2,}/gi, \" \");//2 or more space to 1\r\n        str = str.replace(/\\n /, \"\\n\"); // exclude newline with a start spacing\r\n\r\n        let counter = 0;\r\n        if (!allWords) {\r\n            let wordsStore = localforageInit.wordStore();\r\n            await wordsStore.getItem(\"allWords\").then((words) => {\r\n                allWords = words.map(word => word.toLowerCase().trim());\r\n            }).catch(function (err) {\r\n                // This code runs if there were any errors\r\n                console.log(err);\r\n                return err;\r\n            });\r\n        }\r\n\r\n        str.split(' ').forEach((str, i, array) => {\r\n\r\n            str = str.toLowerCase();\r\n            if (allWords.includes(str) && str !== \"\") {\r\n                counter++;\r\n            }\r\n        });\r\n        return counter;\r\n    }\r\n\r\n}","const localforage = require('localforage');\r\n\r\nexport let localforageInit = {\r\n    archiveStore() {\r\n        return localforage.createInstance({\r\n            driver: localforage.INDEXEDDB, // Force WebSQL; same as using setDriver()\r\n            name: '/biz/',\r\n            version: 1.0,\r\n            storeName: 'IndexDB', // Should be alphanumeric, with underscores.\r\n            description: '/biz/ Archive'\r\n        });\r\n    },\r\n\r\n    wordStore() {\r\n        return localforage.createInstance({\r\n            driver: localforage.INDEXEDDB, // Force WebSQL; same as using setDriver()\r\n            name: '/biz/',\r\n            version: 1.0,\r\n            storeName: 'words', // Should be alphanumeric, with underscores.\r\n            description: 'All English Words'\r\n        });\r\n    },\r\n\r\n    computedStore() {\r\n        return localforage.createInstance({\r\n            driver: localforage.INDEXEDDB, // Force WebSQL; same as using setDriver()\r\n            name: '/biz/',\r\n            version: 1.0,\r\n            storeName: 'computed', // Should be alphanumeric, with underscores.\r\n            description: 'Processed posts'\r\n        });\r\n    },\r\n\r\n    nsfwScoreStore() {\r\n        return localforage.createInstance({\r\n            driver: localforage.INDEXEDDB, // Force WebSQL; same as using setDriver()\r\n            name: '/biz/',\r\n            version: 1.0,\r\n            storeName: 'nsfw_store', // Should be alphanumeric, with underscores.\r\n            description: 'Ratings for various images'\r\n        });\r\n    },\r\n\r\n    async retriveNewestUNIXKey() {\r\n\r\n        let archiveStore = localforageInit.archiveStore();\r\n\r\n        return await archiveStore.keys().then(uNIXkeys => {\r\n            // An array of all the keys.\r\n            // Retrive the newest post (UTC Time).\r\n            return Math.max(...uNIXkeys);\r\n        }).catch(function (err) {\r\n            console.log(err);\r\n        });\r\n    },\r\n\r\n    async retriveAllUNIXKeys() {\r\n\r\n        let archiveStore = localforageInit.archiveStore();\r\n    \r\n        return await archiveStore.keys().then(uNIXkeys => {\r\n          // Return an array of all the keys.\r\n          return uNIXkeys;\r\n        }).catch(function (err) {\r\n          console.log(err);\r\n        });\r\n      },\r\n\r\n      async getItem(key) {\r\n\r\n        let archiveStore = localforageInit.archiveStore();\r\n        let computedStore = localforageInit.computedStore();\r\n    \r\n        return await computedStore.getItem(key).then(async value => {\r\n          if (!value) {\r\n            value = await archiveStore.getItem(key);\r\n          }\r\n          return value;\r\n        }).catch(function (err) {\r\n          console.log(err);\r\n        });\r\n      }\r\n}","import React, { Component } from 'react';\r\nimport { localforageInit } from './utils/initLocalforage';\r\nimport { analyser } from './utils/analyser';\r\n\r\nexport class GetAllPosts extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getThreadPosts = this.getThreadPosts.bind(this);\r\n    this.retriveNewestUNIXKey = this.retriveNewestUNIXKey.bind(this);\r\n    this.retriveNewestValue = this.retriveNewestValue.bind(this);\r\n    this.update = this.update.bind(this);\r\n\r\n    this.getAllPosts = this.getAllPosts.bind(this);\r\n    this.getAllPostsCallback = this.getAllPostsCallback.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n\r\n    let uNIXkey = await this.retriveNewestUNIXKey();\r\n    let uNIXvalue = await this.retriveNewestValue(uNIXkey);\r\n    if (uNIXkey) {\r\n        this.getAllPostsCallback(Number(uNIXkey), uNIXvalue);\r\n      }\r\n    await this.update(990);\r\n\r\n  }\r\n\r\n  async update(delta) {\r\n\r\n    if (delta > 35791) { delta = 35791 }\r\n\r\n    setTimeout(async () => {\r\n\r\n      await this.props.refreshCatalog();\r\n      this.getAllPosts();\r\n\r\n      this.update(analyser.generateCryptoRandomNumber(5, 30)); //Generate a random time between 10 and 30 minutes to make the timing of retrivals more unpredicatable.\r\n      console.log(`Time till next update ${delta} minutes`);\r\n\r\n    }, delta * 60000);\r\n  }\r\n\r\n  getAllPostsCallback(key, allThreadPosts) {\r\n    this.props.handleData('posts', allThreadPosts, key);\r\n  }\r\n\r\n  async getAllPosts() {\r\n\r\n    let key = `${Date.now()}`;\r\n    let archiveStore = localforageInit.archiveStore();\r\n\r\n    if (!Array.isArray(this.props.threads) || !this.props.threads.length) {\r\n      // array does not exist, is not an array, or is empty\r\n      return;\r\n    }\r\n\r\n    let itemsProcessed = 0;\r\n    let allThreadPosts = [];\r\n\r\n    this.props.threads.reverse().forEach((thread, index, array) => {\r\n\r\n      //Limit polling to 1 every 1 second\r\n      setTimeout(async () => {\r\n        console.log(index);\r\n\r\n        let threadPosts = await this.getThreadPosts(thread.no);\r\n        allThreadPosts[index] = threadPosts;\r\n        itemsProcessed++;\r\n\r\n        if (array.length === itemsProcessed) {\r\n\r\n          await archiveStore.setItem(key, allThreadPosts).then(success => {\r\n            //Success\r\n          }).catch(error => {\r\n            console.log(error);\r\n          });\r\n\r\n          this.getAllPostsCallback(key, allThreadPosts);\r\n        }\r\n\r\n      }, index * 500);\r\n    });\r\n\r\n  }\r\n\r\n  async retriveNewestUNIXKey() {\r\n\r\n    let archiveStore = localforageInit.archiveStore();\r\n\r\n    return await archiveStore.keys().then(uNIXkeys => {\r\n      return Math.max(...uNIXkeys);\r\n    }).catch(function (err) {\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  async retriveNewestValue(key) {\r\n\r\n    let archiveStore = localforageInit.archiveStore();\r\n    let computedStore = localforageInit.computedStore();\r\n\r\n    return await computedStore.getItem(key).then(async value => {\r\n      if (!value) {\r\n        value = await archiveStore.getItem(key);\r\n      }\r\n      return value;\r\n    }).catch(function (err) {\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  async getThreadPosts(threadNo) {\r\n    let corsProxy = \"https://cors-proxy-0.herokuapp.com/\";\r\n    let board = \"biz\";\r\n    let url = corsProxy + \"https://a.4cdn.org/\" + board + \"/thread/\" + threadNo + \".json\";\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      if (response.ok) {\r\n        const jsonResponse = await response.json();\r\n        return jsonResponse;\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div></div>\r\n    )\r\n  }\r\n}\r\n","// getting-started.js\r\nconst mongoose = require('mongoose');\r\n\r\nexport let db = {\r\n    connect() {\r\n        console.log(mongoose);\r\n        mongoose.connect('mongodb://localhost/test');\r\n    }\r\n}\r\n","const localforage = require('localforage');\r\n\r\nlet websiteWeights =\r\n    [{\r\n        href: 'youtube.com',\r\n        weight: 0.2\r\n    }, {\r\n        href: 'youtu.be',\r\n        weight: 0.2\r\n    }, {\r\n        href: 'medium.com',\r\n        weight: 1.2\r\n    }];\r\n\r\nexport let linkScore = {\r\n    getOPWeight(thread) {\r\n        //Amount of links in the Original Post\r\n        let opLinksObject = thread.links.find(link => link.postNo === 0);\r\n        if (!opLinksObject) {\r\n            return 0;\r\n        }\r\n\r\n        let opLinkCount = opLinksObject.linksInPost.length;\r\n\r\n        //let weightedHrefsFoundArray = [];\r\n        let weightedHrefsFoundArray = opLinksObject.linksInPost.reduce((arr, link) => {\r\n            let found = websiteWeights.find(website => link.href.toLowerCase().includes(website.href));\r\n            if (found) {\r\n                arr.push(found.href);\r\n            }\r\n            return arr;\r\n        }, []);\r\n\r\n\r\n        let totalWeight = websiteWeights.reduce((sum, weightedWebsite) => {\r\n            let count = weightedHrefsFoundArray.filter(href => href === weightedWebsite.href).length;\r\n            return sum + count * weightedWebsite.weight;\r\n        }, 0);\r\n\r\n        let opLinkWeight = (opLinkCount - weightedHrefsFoundArray.length) + totalWeight;\r\n\r\n        return opLinkWeight;\r\n    },\r\n    getAllWeight(thread) {\r\n        //Exclude the OP post from link counting\r\n        let filteredLinks = thread.links.filter(post => post.postNo !== 0);\r\n        //Amount of links in all posts\r\n        let linkCount = filteredLinks.reduce((counter, links) => counter + links.linksInPost.length, 0);\r\n\r\n        let weightedHrefsFoundArray = filteredLinks.map(post => {\r\n            let hrefsArray = post.linksInPost.reduce((arr, link) => {\r\n                let found = websiteWeights.find(website => link.href.toLowerCase().includes(website.href));\r\n                if (found) {\r\n                    arr.push(found.href);\r\n                }\r\n                return arr;\r\n            }, []);\r\n            return hrefsArray;\r\n        });\r\n        weightedHrefsFoundArray = weightedHrefsFoundArray.flat();\r\n\r\n        let totalWeight = websiteWeights.reduce((sum, weightedWebsite) => {\r\n            let count = weightedHrefsFoundArray.filter(href => href === weightedWebsite.href).length;\r\n            return sum + count * weightedWebsite.weight;\r\n        }, 0);\r\n\r\n        let linkWeight = (linkCount - weightedHrefsFoundArray.length) + totalWeight;\r\n\r\n        return linkWeight;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './DataAnalyser.css';\r\nimport { analyser } from './utils/analyser.js';\r\nimport { db } from './utils/saveToDatabase.js';\r\nimport { localforageInit } from './utils/initLocalforage';\r\nimport { linkScore } from './utils/link-score';\r\n\r\nconst _ = require(\"underscore\");\r\nconst Chart = require('chart.js');\r\nconst outliers = require('outliers');\r\n\r\nconst linkify = require('linkifyjs');\r\n\r\nconst sanitizeHtml = require('sanitize-html');\r\nconst ReactDOMServer = require('react-dom/server');\r\nconst HtmlToReactParser = require('html-to-react').Parser;\r\n\r\n\r\nvar x;\r\nvar y;\r\nvar updateCounter = 0;\r\n\r\nexport class DataAnalyser extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.startAnalyser = this.startAnalyser.bind(this);\r\n    this.fileReader = this.fileReader.bind(this);\r\n    this.storeAndUpdateThreadState = this.storeAndUpdateThreadState.bind(this);\r\n    this.preworkChecks = this.preworkChecks.bind(this);\r\n    this.getNudityScores = this.getNudityScores.bind(this);\r\n\r\n    this.filterCreationDate = this.filterCreationDate.bind(this);\r\n    this.rate = this.rate.bind(this);\r\n    this.nsfwItemCompleted = this.nsfwItemCompleted.bind(this);\r\n\r\n    this.iterateLinks = this.iterateLinks.bind(this);\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (Array.isArray(this.props.threadPosts) && this.props.threadPosts.length !== 0) {\r\n      // this.startAnalyser();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n\r\n    if (!_.isEqual(prevProps.threadPosts, this.props.threadPosts)) {\r\n\r\n      if ((Array.isArray(this.props.threadPosts) && this.props.threadPosts.length !== 0)) {\r\n\r\n        if (!this.props.computed) {\r\n          this.startAnalyser();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  async storeAndUpdateThreadState(threadPosts) {\r\n    let computedStore = localforageInit.computedStore();\r\n\r\n    await computedStore.setItem(this.props.threadKey, threadPosts).then(success => {\r\n      //Successfully saved, update state.\r\n      this.props.handleData(\"computed\", threadPosts, this.props.threadKey);\r\n    }).catch(error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  async preworkChecks(threadPosts) {\r\n\r\n    // Bad data check\r\n    if (!this.props.threadKey) {\r\n      console.log(`threadKey is undefined`);\r\n      return false;\r\n    }\r\n    if (!Array.isArray(threadPosts) || !threadPosts.length) {\r\n      console.log(`threadPosts is not an array or empty`);\r\n      return false;\r\n    }\r\n    let elementCheck = () => threadPosts.every(posts => {\r\n      if (!posts) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    if (!elementCheck()) {\r\n      console.log(`Array \"${this.props.threadKey}\" has missing values.`);\r\n\r\n      let archiveStore = localforageInit.archiveStore();\r\n\r\n      archiveStore.removeItem(this.props.threadKey).then(function () {\r\n        console.log(`${this.props.threadKey} has been deleted!`);\r\n      }).catch(function (err) {\r\n        console.log(err);\r\n      });\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  async startAnalyser() {\r\n\r\n    // Deep-copy the array\r\n    let threadPosts = JSON.parse(JSON.stringify(this.props.threadPosts));\r\n\r\n    if (!await this.preworkChecks(threadPosts)) {\r\n      return;\r\n    }\r\n\r\n    db.connect();\r\n\r\n    // threadPosts = await analyser.fleschKincaid(threadPosts); //async //Unused\r\n    // threadPosts = analyser.uniqueParticipants(threadPosts); //Unused\r\n\r\n    threadPosts = analyser.time(threadPosts);\r\n    threadPosts = analyser.links(threadPosts);\r\n    threadPosts = analyser.ticker(threadPosts);\r\n\r\n    // Nudity Promise\r\n    let a = this.getNudityScores(threadPosts).then(nudityScoreArray => {\r\n      threadPosts.forEach((thread, i) => {\r\n        thread.nsfw_score = nudityScoreArray[i];\r\n      });\r\n    })\r\n      .catch(err => {\r\n        console.error(err)\r\n      });\r\n\r\n    // Word counting Promise\r\n    let b = analyser.postLength(threadPosts).then(wordCountArray => {\r\n      threadPosts.forEach((thread, threadIndex) => {\r\n        thread.posts.forEach((post, postIndex) => {\r\n\r\n          if (!wordCountArray[threadIndex][postIndex]) { return }\r\n          post.Ωword_count = wordCountArray[threadIndex][postIndex].Ωword_count;\r\n          post.Ωunique_word_count = wordCountArray[threadIndex][postIndex].Ωword_count;\r\n          post.Ωunique_word_count_percent = wordCountArray[threadIndex][postIndex].Ωword_count;\r\n\r\n        });\r\n      });\r\n    })\r\n      .catch(err => {\r\n        console.error(err)\r\n      });\r\n\r\n      Promise.all([a, b]).then(values => {\r\n        this.storeAndUpdateThreadState(threadPosts);\r\n        threadPosts = this.rate(threadPosts);\r\n      })\r\n\r\n    \r\n    //this.iterateLinks(threadPosts); //Do not run for now.\r\n    console.log(\"Prepared\");\r\n    //this.filterLinks();\r\n\r\n    //this.paintGraph();\r\n  }\r\n\r\n  async getNudityScores(threadPosts) {\r\n    const testImg = `https://i.4cdn.org/biz/1544987182299.jpg`;\r\n\r\n    let clonedArray = JSON.parse(JSON.stringify(threadPosts));\r\n    let scoreArray = [];\r\n\r\n    // Read from IndexDB ------------\r\n    let scores = await localforageInit.nsfwScoreStore().getItem('images').then(results => {\r\n      return results;\r\n    }).catch(err => {\r\n      console.log(err);\r\n    });\r\n    //-------------------------------\r\n    if (!scores) { scores = [] };\r\n\r\n    let allowedImageFileTypes = ['.jpeg', '.jpg', '.png', '.gif'];\r\n    let itemsToProcess = 0;\r\n    let itemsProcessed = 0;\r\n\r\n    let promise = new Promise((resolve, reject) => {\r\n      clonedArray.forEach((thread, index) => {\r\n        itemsToProcess++;\r\n\r\n        setTimeout(async () => {\r\n\r\n          let nsfwItemCompleted = async () => {\r\n            itemsProcessed++;\r\n            if (itemsProcessed === itemsToProcess) {\r\n              // Save to IndexDB ------------\r\n              await localforageInit.nsfwScoreStore().setItem('images', scores).then(success => {\r\n                resolve(scoreArray);\r\n                console.log(\"saved\");\r\n              }).catch(err => {\r\n                console.log(err);\r\n              });\r\n              //-----------------------------\r\n\r\n            }\r\n          }\r\n\r\n          let imageUrl = `https://i.4cdn.org/biz/${thread.posts[0].tim}${thread.posts[0].ext}`;\r\n          let exists = scores.find(url => url.imageUrl === imageUrl);\r\n\r\n          if (exists && exists.nsfw_score >= 0) {\r\n            scoreArray[index] = exists.nsfw_score;\r\n            nsfwItemCompleted();\r\n            return;\r\n          } else if (!allowedImageFileTypes.includes(thread.posts[0].ext)) { //Image is not of an allowed file type.\r\n            nsfwItemCompleted();\r\n            return;\r\n          }\r\n\r\n          let port = `8080`;\r\n          await fetch(`http://localhost:${port}/porn_image?url=${imageUrl}`).then(async (response) => {\r\n\r\n            let find = /nsfw_score: (\\d.\\d*)/g\r\n            let nsfw_score = parseFloat(find.exec(await response.text())[1]);\r\n\r\n            scoreArray[index] = nsfw_score;\r\n            scores.push({ imageUrl: imageUrl, nsfw_score: nsfw_score });\r\n\r\n          }).catch(err => {\r\n\r\n            scoreArray[index] = -1;\r\n            scores.push({ imageUrl: imageUrl, nsfw_score: -1 });\r\n\r\n            console.log(err);\r\n\r\n          });\r\n          nsfwItemCompleted();\r\n\r\n        }, index * 500);\r\n      });\r\n    });\r\n    return promise;\r\n  }\r\n\r\n\r\n  async nsfwItemCompleted(itemsToProcess, itemsProcessed) {\r\n\r\n  }\r\n\r\n  rate(threadPosts) {\r\n\r\n    let normalise = (min, max, val) => {\r\n      let delta = max - min;\r\n      let result = (val - min) / delta;\r\n      return result > 1 ? 1 : result;\r\n    };\r\n\r\n    // Rate based on time\r\n    threadPosts.forEach(thread => {\r\n      thread.rating = 0;\r\n      thread.ratings = {};\r\n    });\r\n\r\n    let min = Math.min(...threadPosts.map(thread => thread.time_posted));\r\n    let max = Math.max(...threadPosts.map(thread => thread.time_posted));\r\n\r\n    threadPosts.forEach(thread => {\r\n      thread.rating = thread.rating + normalise(max, min, thread.time_posted) * 0.8;\r\n      thread.ratings.timeRating = normalise(max, min, thread.time_posted) * 0.8;\r\n    });\r\n\r\n\r\n    // Rate based on word count\r\n    min = 8;\r\n    max = Math.max(...threadPosts.map(thread => thread.posts[0].Ωunique_word_count));\r\n    console.log(`Min word count: ${min} and Max word count: ${max}`);\r\n\r\n    threadPosts.forEach(thread => {\r\n      let rating = normalise(min, max, thread.posts[0].Ωunique_word_count);\r\n\r\n      if (rating < 0 && thread.nsfw_score > 0.35) {\r\n        rating = rating * 45\r\n      } else if (rating < 0) {\r\n        rating = rating * 15\r\n      }\r\n\r\n      thread.rating = thread.rating + rating;\r\n      // console.log(`${rating}, Word Count ${thread.posts[0].Ωunique_word_count}`)\r\n      thread.ratings.wordRating = rating;\r\n    });\r\n    // const cryptocurrencies = require('cryptocurrencies');\r\n    // console.log(cryptocurrencies.symbols());\r\n\r\n    //Rate based on ticker counter\r\n    min = 0;\r\n    max = Math.max(...threadPosts.map(thread => thread.tickers.length));\r\n\r\n    threadPosts.forEach(thread => {\r\n      let rating = normalise(min, max, thread.tickers.length) * 0.4;\r\n      thread.rating = thread.rating + rating;\r\n      // console.log(`${rating}, Word Count ${thread.posts[0].Ωunique_word_count}`)\r\n      thread.ratings.ticker = rating;\r\n    });\r\n\r\n    // Rate based on web links\r\n    min = Math.min(...threadPosts.map(thread => thread.links.length));\r\n\r\n    let links = threadPosts.reduce((filtered, thread, i) => {\r\n\r\n      let count = thread.links.reduce((counter, link) => {\r\n        return counter + link.linksInPost.length;\r\n      }, 0);\r\n      if (count) { filtered.push(count) };\r\n\r\n      return filtered;\r\n    }, []);\r\n\r\n\r\n    let sortNumber = (a, b) => {\r\n      return a - b;\r\n    }\r\n    let outlierLinks = outliers(links.sort(sortNumber));\r\n    //Average, sum then divide.\r\n    let average = outlierLinks.reduce((sum, number, index, array) => {\r\n      sum = sum + number;\r\n      sum = array.length === index + 1 ? sum / array.length : sum;\r\n      return sum;\r\n    }, 0);\r\n\r\n    // console.log(links.sort(sortNumber));\r\n    // console.log(outliers(links.sort(sortNumber)));\r\n    console.log(`Average: ${average}`);\r\n\r\n    min = 0;\r\n    max = average;\r\n\r\n    threadPosts.forEach((thread, i) => {\r\n\r\n      //Give a score that depends on the quality of links in each comment and the OP.\r\n\r\n      // Give points for links in the all comments excluding OP.\r\n      let linkWeight = linkScore.getAllWeight(thread);\r\n\r\n      let linkRating = normalise(min, max, linkWeight) * 0.4;\r\n      thread.rating = thread.rating + linkRating;\r\n      thread.ratings.linkRating = linkRating;\r\n\r\n      // Give points for links in the OP comment.\r\n      let opLinkWeight = linkScore.getOPWeight(thread);\r\n\r\n      let opLinkRating = normalise(0, 3, opLinkWeight) * 0.65;\r\n      thread.rating = thread.rating + opLinkRating;\r\n      thread.ratings.opLinkRating = opLinkRating;\r\n    });\r\n\r\n    min = 0;\r\n    max = 3;\r\n\r\n    threadPosts.forEach((thread, i) => {\r\n\r\n    });\r\n\r\n    return threadPosts;\r\n  }\r\n\r\n  iterateLinks(threadPosts) {\r\n    let linkCards = [];\r\n    threadPosts.forEach(thread => {\r\n      if (thread.links.length !== 0) {\r\n        linkCards.push(\r\n          <div className=\"op\" key={thread.posts[0].no}>\r\n            <a href={`https://boards.4channel.org/biz/thread/${thread.posts[0].no}`} target=\"_blank\" rel=\"noopener noreferrer\">OP Poster: {thread.posts[0].Id}>>></a>\r\n            <p className=\"id\" dangerouslySetInnerHTML={{ __html: thread.posts[0].com }}></p>\r\n            <p>{thread.posts[0].sub}</p>\r\n          </div>\r\n        );\r\n      }\r\n      //Note: using post numbers instead of IDs, not best practise.\r\n      thread.links.forEach((link, i) => {\r\n        if (thread.posts[0].no !== thread.posts[link.postNo].no) {\r\n\r\n          let htmlToReactParser = new HtmlToReactParser();\r\n          let reactElement = htmlToReactParser.parse(thread.posts[link.postNo].com);\r\n          let reactHtml = ReactDOMServer.renderToStaticMarkup(reactElement);\r\n\r\n          linkCards.push(\r\n            <div className=\"child\" key={thread.posts[link.postNo].no}>\r\n              <p className=\"id\">{link.postId}</p>\r\n              <p className=\"\" dangerouslySetInnerHTML={{ __html: thread.posts[link.postNo].com }}></p>\r\n              <p className=\"\">{thread.posts[link.postNo].sub}</p>\r\n            </div>\r\n          );\r\n        }\r\n\r\n      });\r\n    });\r\n    this.props.handleData(\"cards\", linkCards);\r\n  }\r\n\r\n  filterCreationDate(threadPosts) {\r\n\r\n  }\r\n\r\n  // Used for putting the dictionary words into memory.\r\n  fileReader() {\r\n\r\n    let fileReader;\r\n    let fileInput = document.querySelector('#myfiles');\r\n    let files = fileInput.files;\r\n    console.log(files);\r\n\r\n    const readFile = (file) => {\r\n      fileReader = new FileReader();\r\n      fileReader.readAsText(file);\r\n      fileReader.onload = function (e) {\r\n\r\n        // The file's text will be printed here\r\n        let words = fileReader.result.toString().split('\\n');\r\n\r\n        //Save the array\r\n        let wordsStore = localforageInit.wordStore();\r\n\r\n        wordsStore.setItem(\"allWords\", words).then(async function (value) {\r\n          console.log(await wordsStore.getItem(\"allWords\"));\r\n        }).catch(function (err) {\r\n          console.log(err);\r\n        });\r\n      };\r\n    }\r\n\r\n    const error = (event, fileReader) => {\r\n      fileReader.abort();\r\n      console.log(event);\r\n    };\r\n\r\n    readFile(files[0]);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div id='some-elem'></div>\r\n        <div>\r\n          <input id=\"myfiles\" multiple type=\"file\" className=\"file-picker\" onChange={this.fileReader} />\r\n        </div>\r\n        <div className=\"link-posts\">\r\n          <h2>Links</h2>\r\n          <div>{this.props.cards}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { localforageInit } from '../utils/initLocalforage';\r\nrequire('vis/dist/vis.css');\r\nconst vis = require('vis');\r\n\r\nexport class Timeline extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.createVisualisation = this.createVisualisation.bind(this);\r\n        this.timescale = this.timescale.bind(this);\r\n        this.monthDiff = this.monthDiff.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => this.createVisualisation());\r\n    }\r\n\r\n    async createVisualisation() {\r\n\r\n        // DOM element where the Timeline will be attached\r\n        let container = document.getElementById('timeline');\r\n        if (!container) { return }\r\n        if (container.querySelector('.vis-timeline')) { return }\r\n\r\n\r\n        let keys = [];\r\n        keys = await localforageInit.retriveAllUNIXKeys();\r\n        \r\n        let generateFakeKeys = () => {\r\n            let startDate = new Date('2019-01-01T00:00:00');\r\n\r\n            while (startDate.getFullYear() < 2020) {\r\n                startDate.setMinutes(startDate.getMinutes() + 30);\r\n                keys.push(startDate.getTime());\r\n            }\r\n        }\r\n        \r\n        let data = keys.map((UNIX, i) => {\r\n            UNIX = parseInt(UNIX);\r\n\r\n            let date = new Date(UNIX); let mins = ('0' + date.getMinutes()).slice(-2);\r\n            let time24Hr = `${date.getHours()}:${mins}`;\r\n\r\n            return { id: i, title: time24Hr, start: date, type: 'point' }\r\n        });\r\n\r\n        // Create a DataSet (allows two way data-binding)\r\n        let items = new vis.DataSet(data)\r\n\r\n        // Configuration for the Timeline\r\n        let options = {\r\n            height: '250px',\r\n            stack: false,\r\n            horizontalScroll: true,\r\n            zoomKey: 'ctrlKey',\r\n            zoomMin: 10400000,\r\n            zoomMax: 3.1556952e+11,\r\n            start: (() => {\r\n                let zoom = this.props.timelineZoomLevel;\r\n                return zoom ? zoom.start : null;\r\n            })(),\r\n            end: (() => {\r\n                let zoom = this.props.timelineZoomLevel;\r\n                return zoom ? zoom.end : null;\r\n            })()\r\n        };\r\n        // Create a Timeline\r\n        let timeline = new vis.Timeline(container, items, options);\r\n\r\n        timeline.on('rangechanged', (properties) => {\r\n\r\n            this.props.updateTimelineZoomLevel(properties);\r\n            \r\n            let startDate = new Date(Math.min(...keys));\r\n            let endDate = new Date(Math.max(...keys));\r\n            let monthDifference = this.monthDiff(startDate, endDate);\r\n\r\n            let start = new Date(properties.start);\r\n            let end = new Date(properties.end);\r\n            let delta = end - start;\r\n            let itemsPerMonth = 1;\r\n\r\n            console.log(this.timescale(delta));\r\n\r\n            switch (this.timescale(delta)) {\r\n                case '1hour':\r\n                    itemsPerMonth = 999999;\r\n                    break;\r\n                case '2hour':\r\n                    itemsPerMonth = 999999;\r\n                    break;\r\n                case '1day':\r\n                    itemsPerMonth = 999999;\r\n                    break;\r\n                case '2day':\r\n                    itemsPerMonth = 192;\r\n                    break;\r\n                case '1week':\r\n                    itemsPerMonth = 48;\r\n                    break;\r\n                case '2week':\r\n                    itemsPerMonth = 24;\r\n                    break;\r\n                case '1month':\r\n                    itemsPerMonth = 12;\r\n                    break;\r\n                case '2month':\r\n                    itemsPerMonth = 6;\r\n                    break;\r\n                case '1year':\r\n                    itemsPerMonth = 3;\r\n                    break;\r\n                case '2year':\r\n                    itemsPerMonth = 1.5;\r\n                    break;\r\n                default:\r\n                    itemsPerMonth = 0.75;\r\n                    break;\r\n            };\r\n\r\n            let data = [];\r\n\r\n            let nthItem = Math.floor(keys.length / (monthDifference * itemsPerMonth)) > 0 || 1;\r\n\r\n            let monthItems = keys.reduce((items, key, i) => {\r\n                if (i % nthItem === 0) {\r\n                    let keyDate = new Date(parseInt(key));\r\n                    let time24Hr = `${keyDate.getHours()}:${keyDate.getMinutes()}`;\r\n                    let item = { id: key, title: `${time24Hr}`, start: keyDate, type: 'point', style: 'padding: 0.4rem' };\r\n                    items.push(item);\r\n                }\r\n                return items;\r\n            }, []);\r\n            \r\n            data.push(monthItems);\r\n            // console.log(data);\r\n\r\n            data = data.flat();\r\n\r\n            startDate.setUTCMonth(startDate.getUTCMonth() + 1);\r\n\r\n            let items = new vis.DataSet(data);\r\n            timeline.setItems(items);\r\n\r\n        });\r\n\r\n        timeline.on('select',async (properties) => {\r\n            let key = Number(properties.items[0]);\r\n            let allThreadPosts = await localforageInit.getItem(properties.items[0]);\r\n            this.props.handleData('posts', allThreadPosts, key);\r\n        });\r\n    }\r\n\r\n    timescale(unixDelta) {\r\n        let times = {\r\n            halfHour: 3.6e+6 / 2,\r\n            hour: 3.6e+6,\r\n            halfDay: 8.64e+7 / 2,\r\n            day: 8.64e+7,\r\n            halfWeek: 6.048e+8 / 2,\r\n            week: 6.048e+8,\r\n            halfMonth: 2.628e+9 / 2,\r\n            month: 2.628e+9,\r\n            halfYear: 3.154e+10 / 2,\r\n            year: 3.154e+10,\r\n            halfDecade: 3.154e+11 / 2,\r\n            decade: 3.154e+11\r\n        }\r\n        // console.log(unixDelta);\r\n\r\n        if (unixDelta < times.halfDay) {\r\n            return '1day';\r\n        } else if (unixDelta < times.day && unixDelta > times.halfDay) {\r\n            return '2day';\r\n        } else if (unixDelta < times.halfWeek && unixDelta > times.day) {\r\n            return '1week';\r\n        } else if (unixDelta < times.week && unixDelta > times.halfWeek) {\r\n            return '2week';\r\n        } else if (unixDelta < times.halfMonth && unixDelta > times.week) {\r\n            return '1month';\r\n        } else if (unixDelta < times.month && unixDelta > times.halfMonth) {\r\n            return '2month';\r\n        } else if (unixDelta < times.halfYear && unixDelta > times.month) {\r\n            return '1year';\r\n        } else if (unixDelta < times.year && unixDelta > times.halfYear) {\r\n            return '2year';\r\n        } else if (unixDelta < times.halfDecade && unixDelta > times.year) {\r\n            return '1decade';\r\n        } else if (unixDelta < times.decade && unixDelta > times.halfDecade) {\r\n            return '2decade';\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n    monthDiff(startDate, endDate) {\r\n        let year1 = startDate.getFullYear();\r\n        let year2 = endDate.getFullYear();\r\n        let month1 = startDate.getMonth();\r\n        let month2 = endDate.getMonth();\r\n        if (month1 === 0) { //Have to take into account\r\n            month1++;\r\n            month2++;\r\n        }\r\n        //excluding both month1 and month2\r\n\r\n        // return (year2 - year1) * 12 + (month2 - month1) - 1;\r\n        //include either of the months\r\n\r\n        // return (year2 - year1) * 12 + (month2 - month1);\r\n        //include both of the months\r\n\r\n        return (year2 - year1) * 12 + (month2 - month1) + 1;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h4>Archival Times</h4><h6>Press the Ctrl key and scroll to zoom</h6>\r\n                <div id=\"timeline\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}","/* eslint-disable jsx-a11y/anchor-has-content */\r\nimport React, { Component } from 'react';\r\nimport './PostSelectors.css';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { Button } from '@material-ui/core';\r\nimport img404 from '../1024px-No_image_available.svg.png';\r\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\r\nimport { localforageInit } from './utils/initLocalforage';\r\nimport { Timeline } from './display/timeline.js';\r\n\r\nrequire('vis/dist/vis.css');\r\nconst vis = require('vis');\r\n\r\nconst corsProxy = \"https://cors-proxy-0.herokuapp.com/\";\r\n\r\n\r\nexport class PostSelectors extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getImage = this.getImage.bind(this);\r\n    this.arrayBufferToBase64 = this.arrayBufferToBase64.bind(this);\r\n    this.progress = this.progress.bind(this);\r\n    this.nsfwReveal = this.nsfwReveal.bind(this);\r\n    this.createVisualisation = this.createVisualisation.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n\r\n    let postIndex = this.props.postIndex;\r\n    let threadPosts = this.props.threadPosts;\r\n    if (!threadPosts[postIndex]) { return };\r\n    let tim = threadPosts[postIndex].posts[0].tim;\r\n    let ext = threadPosts[postIndex].posts[0].ext;\r\n\r\n    let i = Number(localStorage.getItem(\"currentPostIndex\"));\r\n    if (isNaN(i)) {\r\n      return;\r\n    };\r\n    if (i !== this.props.postIndex) {\r\n      this.props.updateIndex(i);\r\n    } else {\r\n      this.getImage(tim, ext);\r\n    }\r\n\r\n\r\n  }\r\n\r\n  async componentDidUpdate(prevProps) {\r\n\r\n    let postIndex = this.props.postIndex;\r\n    let threadPosts = this.props.threadPosts\r\n    if (!threadPosts[postIndex]) { return };\r\n    let tim = threadPosts[postIndex].posts[0].tim;\r\n    let ext = threadPosts[postIndex].posts[0].ext;\r\n\r\n    if (this.props.postIndex !== prevProps.postIndex) {\r\n      this.getImage(tim, ext);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  arrayBufferToBase64(buffer) {\r\n    var binary = '';\r\n    var bytes = [].slice.call(new Uint8Array(buffer));\r\n\r\n    bytes.forEach((b) => binary += String.fromCharCode(b));\r\n\r\n    return window.btoa(binary);\r\n  }\r\n\r\n  progress({ loaded, total }) {\r\n    let percent = Math.round(loaded / total * 100);\r\n    console.log(this.props.imgPercent);\r\n\r\n    if (isNaN(percent)) {\r\n      this.props.updateImgPercent(0);\r\n    } else {\r\n      this.props.updateImgPercent(Math.round(loaded / total * 100));\r\n    }\r\n  }\r\n\r\n  processing = false;\r\n  downloading = false;\r\n\r\n  async getImage(tim, ext) {\r\n    let imageStr;\r\n    let that = this;\r\n\r\n    if (!this.processing) {\r\n      this.processing = true;\r\n\r\n      fetch(`${corsProxy}https://i.4cdn.org/biz/${tim}${ext}`).then(response => {\r\n\r\n        if (response.status === 404) {\r\n          throw new Error(\"404\");\r\n        }\r\n\r\n        let contentLength = response.headers.get('content-length');\r\n        if (!contentLength) {\r\n          contentLength = 0;\r\n        }\r\n\r\n        const total = parseInt(contentLength, 10);\r\n        let loaded = 0;\r\n\r\n        let timer1 = setInterval(() => {\r\n          this.progress({ loaded, total });\r\n        }, 500);\r\n        that.downloading = true;\r\n\r\n        return new Response(\r\n          new ReadableStream({\r\n            start(controller) {\r\n              const reader = response.body.getReader();\r\n\r\n              read();\r\n              function read() {\r\n\r\n                reader.read().then(({ done, value }) => {\r\n                  if (done) {\r\n                    window.clearInterval(timer1);\r\n                    that.props.updateImgPercent(0);\r\n                    that.downloading = false;\r\n                    controller.close();\r\n                    return;\r\n                  }\r\n                  loaded += value.byteLength;\r\n                  controller.enqueue(value);\r\n                  read();\r\n                }).catch(error => {\r\n                  console.error(error);\r\n                  controller.error(error)\r\n                });\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }).then(response =>\r\n        response.blob()\r\n      ).then(data => {\r\n        this.props.updateImage(URL.createObjectURL(data));\r\n      }).catch(err => {\r\n        this.processing = false;\r\n        that.downloading = false;\r\n        that.props.updateImgPercent(0);\r\n        if (err.message === \"404\") {\r\n          this.props.updateImage(`${img404}`);\r\n        }\r\n      });\r\n    }\r\n    this.processing = false;\r\n    return imageStr;\r\n  }\r\n\r\n  nsfwReveal() {\r\n    console.log('Revealed');\r\n    this.props.updateNsfw();\r\n  }\r\n\r\n  async createVisualisation() {\r\n\r\n    // DOM element where the Timeline will be attached\r\n    let container = document.getElementById('timeline');\r\n    if (!container) { return }\r\n    if (container.querySelector('.vis-timeline')) { return }\r\n\r\n\r\n    // let keys = await localforageInit.retriveAllUNIXKeys();\r\n    let startDate = new Date('2019-01-01T00:00:00');\r\n    let keys = [];\r\n\r\n    while (startDate.getFullYear() < 2020) {\r\n      startDate.setDate(startDate.getDate() + 1);\r\n      keys.push(startDate.getTime());\r\n    }\r\n\r\n    let data = keys.map((UNIX, i) => {\r\n      UNIX = parseInt(UNIX);\r\n\r\n      let date = new Date(UNIX);\r\n      let time24Hr = `${date.getHours()}:${date.getMinutes()}`;\r\n\r\n      return { id: i, content: time24Hr, title: `#${i}`, start: new Date(UNIX), type: 'point' }\r\n    });\r\n\r\n    // Create a DataSet (allows two way data-binding)\r\n    let items = new vis.DataSet(data)\r\n\r\n    // Configuration for the Timeline\r\n    let options = {\r\n      height: '250px',\r\n      stack: false,\r\n      horizontalScroll: true,\r\n      zoomKey: 'ctrlKey',\r\n      zoomMin: 3600000,\r\n      zoomMax: 3.1556952e+11\r\n    };\r\n    // Create a Timeline\r\n    let times = {\r\n      hour: 3.6e+6,\r\n      day: 8.64e+7,\r\n      week: 6.048e+8,\r\n      month: 2.628e+9,\r\n      year: 3.154e+10,\r\n      decade: 3.154e+11\r\n    }\r\n    let timeline = new vis.Timeline(container, items, options);\r\n    timeline.on('rangechanged', (properties) => {\r\n\r\n      let startDate = new Date('2019-01-01T00:00:00');\r\n      let setKeys = (range) => {\r\n        let month1Keys = keys.filter(key => {\r\n          let keyDate = new Date(key);\r\n          if (keyDate.getUTCMonth() === startDate.getUTCMonth() && keyDate.getUTCFullYear() === startDate.getUTCFullYear()) {\r\n            console.log(\"1\");\r\n            return key;\r\n          }\r\n          return false;\r\n        });\r\n\r\n        let length = Math.floor(month1Keys.length / 5);\r\n        month1Keys = month1Keys.filter((key, i) => {\r\n          if (i % length === 0) {\r\n            return true;\r\n          }\r\n        });\r\n\r\n        // Convert the UNIX timestamps into vis timeline items.\r\n        let data = month1Keys.map((key, i) => {\r\n          let keyDate = new Date(parseInt(key));\r\n\r\n          let time24Hr = `${keyDate.getHours()}:${keyDate.getMinutes()}`;\r\n          return { id: i, content: time24Hr, title: `#${i}`, start: keyDate, type: 'point' }\r\n        });\r\n\r\n        console.log(data);\r\n        \r\n        let items = new vis.DataSet(data);\r\n        timeline.setItems(items);\r\n      }\r\n\r\n      console.log('selected items: ' + properties.items);\r\n      let start = new Date(properties.start);\r\n      let end = new Date(properties.end);\r\n      let delta = end - start;\r\n      if (delta < times.day) {\r\n        console.log(\"hours\");\r\n      } else if (delta < times.week && delta > times.day) {\r\n        console.log(\"day\");\r\n      } else if (delta < times.month && delta > times.week) {\r\n        console.log(\"week\");\r\n      } else if (delta < times.year && delta > times.month) {\r\n        setKeys(\"month\");\r\n        console.log(\"month\");\r\n      } else if (delta < times.decade && delta > times.year) {\r\n        console.log(\"year\");\r\n      }\r\n\r\n\r\n    });\r\n    timeline.on('select', (properties) => {\r\n\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let postIndex = this.props.postIndex;\r\n    let threadPosts = this.props.threadPosts;\r\n\r\n\r\n\r\n    if (!threadPosts[postIndex]) { this.props.updateIndex(0); };\r\n\r\n    let progressPercent = () => {\r\n      if (!this.downloading && !this.props.threadImage) {\r\n        return <LinearProgress\r\n          className=\"linear-progress\"\r\n          color=\"secondary\"\r\n        />\r\n      } else if (this.downloading) {\r\n        return <LinearProgress\r\n          className=\"linear-progress\"\r\n          color=\"secondary\"\r\n          variant=\"determinate\"\r\n          value={this.props.imgPercent}\r\n        />\r\n      } else if (this.props.threadImage) {\r\n        return <></>\r\n      }\r\n    }\r\n\r\n    let backgroundImageStyles = () => {\r\n      let style = {\r\n        backgroundImage: `url(${this.props.threadImage})`\r\n      }\r\n      if (threadPosts[postIndex].nsfw_score > 0.43) {\r\n        if (this.props.revealNsfw === true) {\r\n          return (\r\n            <div className=\"post-image fade-in\" style={style}>\r\n            </div>\r\n          )\r\n        } else {\r\n          return (\r\n            <div className=\"nsfw\">\r\n              <Button onClick={this.nsfwReveal} className=\"\">\r\n                <h5>Content Warning: This image may contain sensitive content</h5>\r\n                <p>Click to view</p>\r\n              </Button>\r\n            </div>\r\n          )\r\n        }\r\n      } else {\r\n        return (\r\n          <div className=\"post-image\" style={style}>\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n\r\n    let renderSelectors = (e, direction) => {\r\n\r\n      let title = threadPosts[postIndex].posts[0].sub;\r\n      let description = threadPosts[postIndex].posts[0].com;\r\n      let rating = Math.fround(threadPosts[postIndex].rating);\r\n      let tim = threadPosts[postIndex].posts[0].tim;\r\n      let ext = threadPosts[postIndex].posts[0].ext;\r\n      let hours = Math.abs(new Date(this.props.threadKey) - new Date(tim)) / 36e5;\r\n      hours = hours.toFixed(1);\r\n\r\n      return (\r\n        <div className=\"post\" key={postIndex}>\r\n          {backgroundImageStyles()}\r\n          {progressPercent()}\r\n          <h1>Thread #{postIndex + 1} {hours}</h1>\r\n          <h2>{`${title || ''} ${rating}`}</h2>\r\n          <p className=\"post-image-link\">{`https://i.4cdn.org/biz/${tim}${ext}`}</p>\r\n          <p className=\"post-text\" dangerouslySetInnerHTML={{ __html: description }}></p>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    let getLink = (e) => {\r\n      if (threadPosts[postIndex]) {\r\n        return threadPosts[postIndex].posts[0].no;\r\n      }\r\n      return '';\r\n    };\r\n\r\n\r\n    return (\r\n      <div className=\"biz-card\">\r\n        <div id=\"0\" className=\"Preamble\">\r\n          <button onClick={() => this.props.updateIndex(this.props.postIndex - 10)}>Left 10</button>\r\n          <button onClick={() => this.props.updateIndex(this.props.postIndex - 1)}>Left</button>\r\n          <a href={`https://boards.4channel.org/biz/thread/${getLink()}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <button>Go</button>\r\n          </a>\r\n          <button onClick={() => this.props.updateIndex(this.props.postIndex + 1)}>Right</button>\r\n          <button onClick={() => this.props.updateIndex(this.props.postIndex + 10)}>Right 10</button>\r\n          {renderSelectors(0)}\r\n\r\n        </div>\r\n        <Timeline {...this.props}\r\n        />\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { GetAllPosts } from './Components/GetAllPosts.js';\nimport { DataAnalyser } from './Components/DataAnalyser.js';\nimport { PostSelectors } from './Components/PostSelectors.js';\n\nconst _ = require(\"underscore\");\nconst localforage = require('localforage');\n\nconst corsProxy = \"https://cors-proxy-0.herokuapp.com/\";\nconst board = \"biz\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      computed: 0,\n      postIndex: 0,\n      threadImage: '',\n      imgDownloadPercent: 0,\n      deepaiApiKey: '',\n      revealNsfw: false\n    };\n    this.fetchBoardCatalog = this.fetchBoardCatalog.bind(this);\n    this.prepareData = this.prepareData.bind(this);\n    this.refreshCatalog = this.refreshCatalog.bind(this);\n    this.handleData = this.handleData.bind(this);\n\n    this.updateImage = this.updateImage.bind(this);\n    this.updateIndex = this.updateIndex.bind(this);\n    this.updateImgDownloadPercent = this.updateImgDownloadPercent.bind(this);\n    this.updateNsfw = this.updateNsfw.bind(this);\n    this.updateTimelineZoomLevel = this.updateTimelineZoomLevel.bind(this);\n    \n\n  }\n\n  componentDidMount() {\n    // let timer1 = setInterval(this.fetchBoardCatalog, 30000);\n    // this.setState({timer1: timer1});\n    this.fetchBoardCatalog();\n  }\n\n  async fetchBoardCatalog() {\n    //Retrive the latest /biz/ catalog\n    let url = corsProxy + \"https://a.4cdn.org/\" + board + \"/catalog.json\";\n\n    try {\n      const response = await fetch(url);\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        this.setState({\n          catalog: jsonResponse\n        });\n        this.prepareData();\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async prepareData() {\n\n    //Filter out mod posts\n    //Extract all threads from catalog pages\n    let allThreads = this.state.catalog.reduce((allThreads, page) => {\n      page.threads.forEach(thread => {\n        if (thread.capcode === 'mod') { return }\n        allThreads.push(thread);\n      });\n      return allThreads;\n    }, []);\n    this.setState({\n      threads: allThreads\n    });\n\n    let crypto = () => { \n      //Generate two cryptographically random, unsigned 32-bit integers\n      let array = new Uint32Array(2);\n      window.crypto.getRandomValues(array);\n\n      // keep all 32 bits of the the first, top 20 of the second for 52 random bits\n      let mantissa = (array[0] * Math.pow(2, 20)) + (array[1] >>> 12)\n      // shift all 52 bits to the right of the decimal point\n      let result = mantissa * Math.pow(2, -52);\n\n      return result;\n    };\n\n    let randomCryptoRandomFromInterval = (min, max) => { // min and max included\n      return Math.floor(crypto() * (max - min + 1) + min);\n    }\n\n  }\n\n  async refreshCatalog() {\n    await this.fetchBoardCatalog();\n  }\n\n  handleData(type, data, key) {\n    if (type === \"posts\") {\n      this.setState({\n        threadPosts: data,\n        threadKey: key,\n        computed: 0\n      });\n    } else if (type === \"cards\") {\n      this.setState({\n        cards: data\n      });\n    } else if (type === \"computed\") {\n      console.log(\"computeds\");\n\n      data = _.sortBy(data, 'nsfw_score').reverse();\n      console.log(data);\n      this.setState({\n        threadPosts: data,\n        threadKey: key,\n        computed: 1\n      });\n    }\n\n  }\n\n  updateIndex(index) {\n    if (index < 0) { index = this.state.threadPosts.length - 1 };\n\n    if (index > this.state.threadPosts.length - 1) { index = 0 };\n\n    localStorage.setItem(\"currentPostIndex\", index);\n\n    this.setState({\n      postIndex: index,\n      threadImage: '',\n      revealNsfw: false\n    });\n  }\n  updateImgDownloadPercent(percent) {\n    this.setState({\n      imgDownloadPercent: percent\n    });\n  }\n  updateImage(img) {\n    console.log(\"Set Image in State\");\n\n    this.setState({\n      threadImage: img\n    });\n  }\n\n  updateNsfw() {\n    this.setState({\n      revealNsfw: true\n    })\n  }\n\n  updateTimelineZoomLevel(zoomLevel) {\n    this.setState({\n      timelineZoomLevel: zoomLevel\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n      </p>\n          <GetAllPosts\n            threads={this.state.threads}\n            handleData={this.handleData}\n            refreshCatalog={this.refreshCatalog}\n          />\n\n          <DataAnalyser\n            threadPosts={this.state.threadPosts}\n            threadKey={this.state.threadKey}\n\n            computed={this.state.computed}\n            cards={this.state.cards}\n            handleData={this.handleData}\n            deepaiApiKey={this.state.deepaiApiKey}\n          />\n\n          {this.state.computed && (<PostSelectors\n\n            threadPosts={this.state.threadPosts}\n            threadKey={this.state.threadKey}\n            \n            updateImgPercent={this.updateImgDownloadPercent}\n            imgPercent={this.state.imgDownloadPercent}\n\n            updateImage={this.updateImage}\n            threadImage={this.state.threadImage}\n\n            updateIndex={this.updateIndex}\n            postIndex={this.state.postIndex}\n            \n            updateNsfw={this.updateNsfw}\n            revealNsfw={this.state.revealNsfw}\n\n            updateTimelineZoomLevel={this.updateTimelineZoomLevel}\n            timelineZoomLevel={this.state.timelineZoomLevel}\n      \n            handleData={this.handleData}\n          />\n          )}\n\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}